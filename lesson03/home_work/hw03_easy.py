
#Работу выполнил: Сашников Никита Александрович


# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

"""
#Тут ниже эпическая попытка решить задачу через строки и списки, расщепив исходники
#на символы, но я потерпел фиаско на счетчике, который переносит +1 в старший разряд.
# Решил подключить математику, т.к. стало очевидно, что это компактнее и бытрее Х-)

def my_round(number, ndigits):
    b = str(number)
    left_num = b[:(b.find("."))]
    c = list(b[(b.find("."))+1:])
    if int(c[ndigits]) >= 5:
        c[ndigits-1] = str(int(c[ndigits-1])+1)
        for i in c:
            if i == "10":
                c[i - 1] = str(int(c[i - 1]) + 1)
    right_num = "".join(c[:ndigits])
    str_result= left_num +"."+ right_num
    float_result = float(str_result)
    print(float_result)
print(my_round(2.99998, 4))
"""

def my_round(number, ndigits):
    a = int(number * (10**(ndigits+1)))
    #сохраняем исходник, но убираем точку
    if a % 10 >= 5:
        a = int(a*(10**(-1))+1)
    # тут условие округления. Если число >=5, то в старший разряд +1
    a = float(a*(10**(-ndigits)))
    # заканчиваем выступление возвращением плавающей точки.
    # заметил, чо можно жестко зафиксировать к-во знаков после запятой, если там все нули
    #, но не нашел простого метода сделать это... кхм )
    return a

print(my_round(2.1234567, 5))
print(my_round(2.1999967, 4))
print(my_round(2.9999967, 3))

# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def lucky_ticket(ticket_number):
    pass


print(lucky_ticket(123006))
print(lucky_ticket(12321))
print(lucky_ticket(436751))
